-- Compiled with roblox-ts v2.3.0
local TS = _G[script]
--[[
	*
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 
]]
-- This file is automatically generated. Do not modify it.
local Cam16 = require(script.Parent.Parent:WaitForChild("hct"):WaitForChild("cam16")).Cam16
local Hct = require(script.Parent.Parent:WaitForChild("hct"):WaitForChild("hct")).Hct
local colorUtils =  require(script.Parent.Parent:WaitForChild("utils"):WaitForChild("color_utils"))
local mathUtils = require(script.Parent.Parent:WaitForChild("utils"):WaitForChild("math_utils"))
-- material_color_utilities is designed to have a consistent API across
-- platforms and modular components that can be moved around easily. Using a
-- class as a namespace facilitates this.
--
-- tslint:disable:class-as-namespace
--[[
	*
	 * Functions for blending in HCT and CAM16.
	 
]]
local Blend
do
	Blend = setmetatable({}, {
		__tostring = function()
			return "Blend"
		end,
	})
	Blend.__index = Blend
	function Blend.new(...)
		local self = setmetatable({}, Blend)
		return self:constructor(...) or self
	end
	function Blend:constructor()
	end
	function Blend:harmonize(designColor, sourceColor)
		local fromHct = Hct:fromInt(designColor)
		local toHct = Hct:fromInt(sourceColor)
		local differenceDegrees = mathUtils.differenceDegrees(fromHct:get_hue(), toHct:get_hue())
		local rotationDegrees = math.min(differenceDegrees * 0.5, 15.0)
		local outputHue = mathUtils.sanitizeDegreesDouble(fromHct:get_hue() + rotationDegrees * mathUtils.rotationDirection(fromHct:get_hue(), toHct:get_hue()))
		return Hct:from(outputHue, fromHct:get_chroma(), fromHct:get_tone()):toInt()
	end
	function Blend:hctHue(from, to, amount)
		local ucs = Blend:cam16Ucs(from, to, amount)
		local ucsCam = Cam16:fromInt(ucs)
		local fromCam = Cam16:fromInt(from)
		local blended = Hct:from(ucsCam.hue, fromCam.chroma, colorUtils.lstarFromArgb(from))
		return blended:toInt()
	end
	function Blend:cam16Ucs(from, to, amount)
		local fromCam = Cam16:fromInt(from)
		local toCam = Cam16:fromInt(to)
		local fromJ = fromCam.jstar
		local fromA = fromCam.astar
		local fromB = fromCam.bstar
		local toJ = toCam.jstar
		local toA = toCam.astar
		local toB = toCam.bstar
		local jstar = fromJ + (toJ - fromJ) * amount
		local astar = fromA + (toA - fromA) * amount
		local bstar = fromB + (toB - fromB) * amount
		return Cam16:fromUcs(jstar, astar, bstar):toInt()
	end
end
return {
	Blend = Blend,
}
